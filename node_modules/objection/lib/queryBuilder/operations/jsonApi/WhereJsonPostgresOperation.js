'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _postgresJsonApi = require('./postgresJsonApi');

var _postgresJsonApi2 = _interopRequireDefault(_postgresJsonApi);

var _WrappingQueryBuilderOperation = require('../WrappingQueryBuilderOperation');

var _WrappingQueryBuilderOperation2 = _interopRequireDefault(_WrappingQueryBuilderOperation);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var WhereJsonPostgresOperation = function (_WrappingQueryBuilder) {
  (0, _inherits3.default)(WhereJsonPostgresOperation, _WrappingQueryBuilder);

  function WhereJsonPostgresOperation(builder, name, opt) {
    (0, _classCallCheck3.default)(this, WhereJsonPostgresOperation);

    /**
     * @type {Array.<string>}
     */

    var _this = (0, _possibleConstructorReturn3.default)(this, _WrappingQueryBuilder.call(this, builder, name, opt));

    _this.rawArgs = null;
    return _this;
  }

  WhereJsonPostgresOperation.prototype.call = function call(builder, args) {
    _WrappingQueryBuilder.prototype.call.call(this, builder, args);

    this.rawArgs = _postgresJsonApi2.default.whereJsonbRefOnLeftJsonbValOrRefOnRightRawQueryParams(this.args[0], this.opt.operator, this.args[1], this.opt.prefix);

    return true;
  };

  WhereJsonPostgresOperation.prototype.onBuild = function onBuild(knexBuilder) {
    if (this.opt.bool === 'or') {
      knexBuilder.orWhereRaw.apply(knexBuilder, this.rawArgs);
    } else {
      knexBuilder.whereRaw.apply(knexBuilder, this.rawArgs);
    }
  };

  return WhereJsonPostgresOperation;
}(_WrappingQueryBuilderOperation2.default);

exports.default = WhereJsonPostgresOperation;