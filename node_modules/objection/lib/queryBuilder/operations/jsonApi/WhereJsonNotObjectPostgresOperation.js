'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _postgresJsonApi = require('./postgresJsonApi');

var _postgresJsonApi2 = _interopRequireDefault(_postgresJsonApi);

var _WrappingQueryBuilderOperation = require('../WrappingQueryBuilderOperation');

var _WrappingQueryBuilderOperation2 = _interopRequireDefault(_WrappingQueryBuilderOperation);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var WhereJsonNotObjectPostgresOperation = function (_WrappingQueryBuilder) {
  (0, _inherits3.default)(WhereJsonNotObjectPostgresOperation, _WrappingQueryBuilder);

  function WhereJsonNotObjectPostgresOperation() {
    (0, _classCallCheck3.default)(this, WhereJsonNotObjectPostgresOperation);
    return (0, _possibleConstructorReturn3.default)(this, _WrappingQueryBuilder.apply(this, arguments));
  }

  WhereJsonNotObjectPostgresOperation.prototype.onBuild = function onBuild(knexBuilder) {
    this.whereJsonNotObject(knexBuilder, this.args[0]);
  };

  WhereJsonNotObjectPostgresOperation.prototype.whereJsonNotObject = function whereJsonNotObject(knexBuilder, fieldExpression) {
    var knex = this.knex;
    var self = this;

    function innerQuery() {
      var builder = _postgresJsonApi2.default.whereJsonbRefOnLeftJsonbValOrRefOnRight(this, fieldExpression, "@>", self.opt.compareValue, 'not');
      var ifRefNotExistQuery = _postgresJsonApi2.default.whereJsonFieldQuery(knex, fieldExpression, "IS", null);
      builder.orWhereRaw(ifRefNotExistQuery);
    }

    if (this.opt.bool === 'or') {
      knexBuilder.orWhere(innerQuery);
    } else {
      knexBuilder.where(innerQuery);
    }
  };

  return WhereJsonNotObjectPostgresOperation;
}(_WrappingQueryBuilderOperation2.default);

exports.default = WhereJsonNotObjectPostgresOperation;