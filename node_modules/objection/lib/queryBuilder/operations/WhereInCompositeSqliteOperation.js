'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _WrappingQueryBuilderOperation = require('./WrappingQueryBuilderOperation');

var _WrappingQueryBuilderOperation2 = _interopRequireDefault(_WrappingQueryBuilderOperation);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var WhereInCompositeSqliteOperation = function (_WrappingQueryBuilder) {
  (0, _inherits3.default)(WhereInCompositeSqliteOperation, _WrappingQueryBuilder);

  function WhereInCompositeSqliteOperation() {
    (0, _classCallCheck3.default)(this, WhereInCompositeSqliteOperation);
    return (0, _possibleConstructorReturn3.default)(this, _WrappingQueryBuilder.apply(this, arguments));
  }

  WhereInCompositeSqliteOperation.prototype.onBuild = function onBuild(knexBuilder) {
    this.whereInComposite(knexBuilder, this.args[0], this.args[1]);
  };

  WhereInCompositeSqliteOperation.prototype.whereInComposite = function whereInComposite(knexBuilder, columns, values) {
    var isCompositeKey = _lodash2.default.isArray(columns) && columns.length > 1;

    if (isCompositeKey) {
      if (!_lodash2.default.isArray(values)) {
        // If the `values` is not an array of values but a function or a subquery
        // we have no way to implement this method.
        throw new Error('sqlite doesn\'t support multi-column where in clauses');
      }

      // Sqlite doesn't support the `where in` syntax for multiple columns but
      // we can emulate it using grouped `or` clauses.
      knexBuilder.where(function (builder) {
        _lodash2.default.each(values, function (val) {
          builder.orWhere(function (builder) {
            _lodash2.default.each(columns, function (col, idx) {
              builder.andWhere(col, val[idx]);
            });
          });
        });
      });
    } else {
      var col = _lodash2.default.isString(columns) ? columns : columns[0];

      if (_lodash2.default.isArray(values)) {
        values = _lodash2.default.compact(_lodash2.default.flatten(values));
      }

      // For non-composite keys we can use the normal whereIn.
      knexBuilder.whereIn(col, values);
    }
  };

  return WhereInCompositeSqliteOperation;
}(_WrappingQueryBuilderOperation2.default);

exports.default = WhereInCompositeSqliteOperation;