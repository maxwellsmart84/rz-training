'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _WrappingQueryBuilderOperation = require('./WrappingQueryBuilderOperation');

var _WrappingQueryBuilderOperation2 = _interopRequireDefault(_WrappingQueryBuilderOperation);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var WhereRefOperation = function (_WrappingQueryBuilder) {
  (0, _inherits3.default)(WhereRefOperation, _WrappingQueryBuilder);

  function WhereRefOperation() {
    (0, _classCallCheck3.default)(this, WhereRefOperation);
    return (0, _possibleConstructorReturn3.default)(this, _WrappingQueryBuilder.apply(this, arguments));
  }

  WhereRefOperation.prototype.onBuild = function onBuild(knexBuilder) {
    if (this.args.length === 2) {
      this.whereRef(knexBuilder, this.args[0], '=', this.args[1]);
    } else if (this.args.length === 3) {
      this.whereRef(knexBuilder, this.args[0], this.args[1], this.args[2]);
    } else {
      throw new Error('expected 2 or 3 arguments');
    }
  };

  WhereRefOperation.prototype.whereRef = function whereRef(knexBuilder, lhs, op, rhs) {
    var formatter = this.formatter();
    op = formatter.operator(op);

    if (!_lodash2.default.isString(lhs) || !_lodash2.default.isString(rhs) || !_lodash2.default.isString(op)) {
      throw new Error('whereRef: invalid operands or operator');
    }

    var sql = formatter.wrap(lhs) + ' ' + op + ' ' + formatter.wrap(rhs);

    if (this.opt.bool === 'or') {
      knexBuilder.orWhereRaw(sql);
    } else {
      knexBuilder.whereRaw(sql);
    }
  };

  return WhereRefOperation;
}(_WrappingQueryBuilderOperation2.default);

exports.default = WhereRefOperation;