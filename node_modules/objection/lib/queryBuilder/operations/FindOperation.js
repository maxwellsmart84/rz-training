'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _QueryBuilderOperation = require('./QueryBuilderOperation');

var _QueryBuilderOperation2 = _interopRequireDefault(_QueryBuilderOperation);

var _promiseUtils = require('../../utils/promiseUtils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var FindOperation = function (_QueryBuilderOperatio) {
  (0, _inherits3.default)(FindOperation, _QueryBuilderOperatio);

  function FindOperation() {
    (0, _classCallCheck3.default)(this, FindOperation);
    return (0, _possibleConstructorReturn3.default)(this, _QueryBuilderOperatio.apply(this, arguments));
  }

  FindOperation.prototype.onAfter = function onAfter(builder, results) {
    if (_lodash2.default.isArray(results)) {
      if (results.length === 1) {
        return callAfterGet(builder, results[0], results);
      } else {
        return (0, _promiseUtils.mapAfterAllReturn)(results, function (result) {
          return callAfterGet(builder, result, result);
        }, results);
      }
    } else {
      return callAfterGet(builder, results, results);
    }
  };

  return FindOperation;
}(_QueryBuilderOperation2.default);

exports.default = FindOperation;


function callAfterGet(builder, model, result) {
  if (_lodash2.default.isObject(model) && _lodash2.default.isFunction(model.$afterGet)) {
    return (0, _promiseUtils.afterReturn)(model.$afterGet(builder.context()), result);
  } else {
    return result;
  }
}