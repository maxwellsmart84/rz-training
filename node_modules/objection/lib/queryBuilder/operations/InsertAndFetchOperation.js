'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _DelegateOperation2 = require('./DelegateOperation');

var _DelegateOperation3 = _interopRequireDefault(_DelegateOperation2);

var _promiseUtils = require('../../utils/promiseUtils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var InsertAndFetchOperation = function (_DelegateOperation) {
  (0, _inherits3.default)(InsertAndFetchOperation, _DelegateOperation);

  function InsertAndFetchOperation() {
    (0, _classCallCheck3.default)(this, InsertAndFetchOperation);
    return (0, _possibleConstructorReturn3.default)(this, _DelegateOperation.apply(this, arguments));
  }

  InsertAndFetchOperation.prototype.onAfterInternal = function onAfterInternal(builder, inserted) {
    var maybePromise = _DelegateOperation.prototype.onAfterInternal.call(this, builder, inserted);

    return (0, _promiseUtils.after)(maybePromise, function (insertedModels) {
      var insertedModelArray = _lodash2.default.isArray(insertedModels) ? insertedModels : [insertedModels];

      return builder.modelClass().query().childQueryOf(builder).whereInComposite(builder.modelClass().getFullIdColumn(), _lodash2.default.map(insertedModelArray, function (model) {
        return model.$id();
      })).then(function (fetchedModels) {
        fetchedModels = _lodash2.default.keyBy(fetchedModels, function (model) {
          return model.$id();
        });

        // Instead of returning the freshly fetched models, update the input
        // models with the fresh values.
        _lodash2.default.each(insertedModelArray, function (insertedModel) {
          insertedModel.$set(fetchedModels[insertedModel.$id()]);
        });

        return insertedModels;
      });
    });
  };

  return InsertAndFetchOperation;
}(_DelegateOperation3.default);

exports.default = InsertAndFetchOperation;