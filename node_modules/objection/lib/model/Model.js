'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _getOwnPropertyDescriptor = require('babel-runtime/core-js/object/get-own-property-descriptor');

var _getOwnPropertyDescriptor2 = _interopRequireDefault(_getOwnPropertyDescriptor);

var _create = require('babel-runtime/core-js/object/create');

var _create2 = _interopRequireDefault(_create);

var _stringify = require('babel-runtime/core-js/json/stringify');

var _stringify2 = _interopRequireDefault(_stringify);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _dec, _dec2, _dec3, _desc, _value, _class, _class2, _temp;

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _ModelBase2 = require('./ModelBase');

var _ModelBase3 = _interopRequireDefault(_ModelBase2);

var _QueryBuilder = require('../queryBuilder/QueryBuilder');

var _QueryBuilder2 = _interopRequireDefault(_QueryBuilder);

var _inheritModel = require('./inheritModel');

var _inheritModel2 = _interopRequireDefault(_inheritModel);

var _RelationExpression = require('../queryBuilder/RelationExpression');

var _RelationExpression2 = _interopRequireDefault(_RelationExpression);

var _hiddenData = require('../utils/hiddenData');

var _hiddenDataGetterSetter = require('../utils/decorators/hiddenDataGetterSetter');

var _hiddenDataGetterSetter2 = _interopRequireDefault(_hiddenDataGetterSetter);

var _ValidationError = require('../ValidationError');

var _ValidationError2 = _interopRequireDefault(_ValidationError);

var _deprecated = require('../utils/decorators/deprecated');

var _deprecated2 = _interopRequireDefault(_deprecated);

var _memoize = require('../utils/decorators/memoize');

var _memoize2 = _interopRequireDefault(_memoize);

var _Relation = require('../relations/Relation');

var _Relation2 = _interopRequireDefault(_Relation);

var _HasOneRelation = require('../relations/hasOne/HasOneRelation');

var _HasOneRelation2 = _interopRequireDefault(_HasOneRelation);

var _HasManyRelation = require('../relations/hasMany/HasManyRelation');

var _HasManyRelation2 = _interopRequireDefault(_HasManyRelation);

var _ManyToManyRelation = require('../relations/manyToMany/ManyToManyRelation');

var _ManyToManyRelation2 = _interopRequireDefault(_ManyToManyRelation);

var _BelongsToOneRelation = require('../relations/belongsToOne/BelongsToOneRelation');

var _BelongsToOneRelation2 = _interopRequireDefault(_BelongsToOneRelation);

var _InstanceFindOperation = require('../queryBuilder/operations/InstanceFindOperation');

var _InstanceFindOperation2 = _interopRequireDefault(_InstanceFindOperation);

var _InstanceInsertOperation = require('../queryBuilder/operations/InstanceInsertOperation');

var _InstanceInsertOperation2 = _interopRequireDefault(_InstanceInsertOperation);

var _InstanceUpdateOperation = require('../queryBuilder/operations/InstanceUpdateOperation');

var _InstanceUpdateOperation2 = _interopRequireDefault(_InstanceUpdateOperation);

var _InstanceDeleteOperation = require('../queryBuilder/operations/InstanceDeleteOperation');

var _InstanceDeleteOperation2 = _interopRequireDefault(_InstanceDeleteOperation);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
  var desc = {};
  Object['ke' + 'ys'](descriptor).forEach(function (key) {
    desc[key] = descriptor[key];
  });
  desc.enumerable = !!desc.enumerable;
  desc.configurable = !!desc.configurable;

  if ('value' in desc || desc.initializer) {
    desc.writable = true;
  }

  desc = decorators.slice().reverse().reduce(function (desc, decorator) {
    return decorator(target, property, desc) || desc;
  }, desc);

  if (context && desc.initializer !== void 0) {
    desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
    desc.initializer = undefined;
  }

  if (desc.initializer === void 0) {
    Object['define' + 'Property'](target, property, desc);
    desc = null;
  }

  return desc;
}

var Model = (_dec = (0, _deprecated2.default)({ removedIn: '0.7.0', useInstead: 'BelongsToOneRelation' }), _dec2 = (0, _deprecated2.default)({ removedIn: '0.7.0', useInstead: 'HasManyRelation' }), _dec3 = (0, _hiddenDataGetterSetter2.default)('relations'), (_class = (_temp = _class2 = function (_ModelBase) {
  (0, _inherits3.default)(Model, _ModelBase);

  function Model() {
    (0, _classCallCheck3.default)(this, Model);
    return (0, _possibleConstructorReturn3.default)(this, _ModelBase.apply(this, arguments));
  }

  /**
   * @param {string|number|Array.<string|number>=} id
   * @returns {string|number|Array.<string|number>}
   */

  Model.prototype.$id = function $id(id) {
    if (arguments.length > 0) {
      return setId(this, arguments[0]);
    } else {
      return getId(this);
    }
  };

  /**
   * @returns {knex}
   */


  Model.prototype.$knex = function $knex() {
    return this.constructor.knex();
  };

  /**
   * @returns {knex}
   */


  Model.prototype.$transaction = function $transaction() {
    return this.constructor.transaction();
  };

  /**
   * @returns {QueryBuilder}
   */


  Model.prototype.$query = function $query() {
    var _this2 = this;

    var ModelClass = this.constructor;

    return ModelClass.QueryBuilder.forClass(ModelClass).findOperationFactory(function (builder) {
      return new _InstanceFindOperation2.default(builder, 'find', { instance: _this2 });
    }).insertOperationFactory(function (builder) {
      return new _InstanceInsertOperation2.default(builder, 'insert', { instance: _this2 });
    }).updateOperationFactory(function (builder) {
      return new _InstanceUpdateOperation2.default(builder, 'update', { instance: _this2 });
    }).patchOperationFactory(function (builder) {
      return new _InstanceUpdateOperation2.default(builder, 'patch', { instance: _this2, modelOptions: { patch: true } });
    }).deleteOperationFactory(function (builder) {
      return new _InstanceDeleteOperation2.default(builder, 'delete', { instance: _this2 });
    }).relateOperationFactory(function () {
      throw new Error('`relate` makes no sense in this context');
    }).unrelateOperationFactory(function () {
      throw new Error('`unrelate` makes no sense in this context');
    });
  };

  /**
   * @param {string} relationName
   * @returns {QueryBuilder}
   */


  Model.prototype.$relatedQuery = function $relatedQuery(relationName) {
    var _this3 = this;

    var relation = this.constructor.getRelation(relationName);
    var ModelClass = relation.relatedModelClass;

    return ModelClass.RelatedQueryBuilder.forClass(ModelClass).findOperationFactory(function (builder) {
      return relation.find(builder, [_this3]);
    }).insertOperationFactory(function (builder) {
      return relation.insert(builder, _this3);
    }).updateOperationFactory(function (builder) {
      return relation.update(builder, _this3);
    }).patchOperationFactory(function (builder) {
      return relation.patch(builder, _this3);
    }).deleteOperationFactory(function (builder) {
      return relation.delete(builder, _this3);
    }).relateOperationFactory(function (builder) {
      return relation.relate(builder, _this3);
    }).unrelateOperationFactory(function (builder) {
      return relation.unrelate(builder, _this3);
    });
  };

  /**
   * @param {string|RelationExpression} relationExpression
   * @param {Object.<string, function(QueryBuilder)>=} filters
   * @returns {Promise}
   */


  Model.prototype.$loadRelated = function $loadRelated(relationExpression, filters) {
    return this.constructor.loadRelated(this, relationExpression, filters);
  };

  /**
   * @param {Constructor.<Model>=} filterConstructor
   * @param {function(Model)} callback
   * @return {Model}
   */


  Model.prototype.$traverse = function $traverse(filterConstructor, callback) {
    if (_lodash2.default.isUndefined(callback)) {
      callback = filterConstructor;
      filterConstructor = null;
    }

    this.constructor.traverse(filterConstructor, this, callback);
    return this;
  };

  Model.prototype.$validate = function $validate() {
    var json = arguments.length <= 0 || arguments[0] === undefined ? this : arguments[0];
    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

    if (json instanceof Model) {
      return _ModelBase.prototype.$validate.call(this, json.$toJson(true), options);
    } else {
      return _ModelBase.prototype.$validate.call(this, json, options);
    }
  };

  Model.prototype.$parseDatabaseJson = function $parseDatabaseJson(json) {
    var ModelClass = this.constructor;
    var jsonAttr = ModelClass.$$getJsonAttributes();

    if (jsonAttr.length) {
      for (var i = 0, l = jsonAttr.length; i < l; ++i) {
        var attr = jsonAttr[i];
        var value = json[attr];

        if (_lodash2.default.isString(value)) {
          json[attr] = JSON.parse(value);
        }
      }
    }

    return json;
  };

  Model.prototype.$formatDatabaseJson = function $formatDatabaseJson(json) {
    var ModelClass = this.constructor;
    var jsonAttr = ModelClass.$$getJsonAttributes();

    if (jsonAttr.length) {
      for (var i = 0, l = jsonAttr.length; i < l; ++i) {
        var attr = jsonAttr[i];
        var value = json[attr];

        if (_lodash2.default.isObject(value)) {
          json[attr] = (0, _stringify2.default)(value);
        }
      }
    }

    return json;
  };

  Model.prototype.$setJson = function $setJson(json, options) {
    _ModelBase.prototype.$setJson.call(this, json, options);

    if (!_lodash2.default.isObject(json)) {
      return;
    }

    var relations = this.constructor.getRelations();
    // Parse relations into Model instances.
    for (var relationName in relations) {
      if (_lodash2.default.has(json, relationName)) {
        var relationJson = json[relationName];
        var relation = relations[relationName];

        if (_lodash2.default.isArray(relationJson)) {
          this[relationName] = relation.relatedModelClass.ensureModelArray(relationJson, options);
        } else if (relationJson) {
          this[relationName] = relation.relatedModelClass.ensureModel(relationJson, options);
        } else {
          this[relationName] = null;
        }
      }
    }
  };

  /**
   * @param {boolean=} shallow
   */


  Model.prototype.$toJson = function $toJson(shallow) {
    if (shallow) {
      return this.$$toJson(false, this.constructor.getRelations(), null);
    } else {
      return this.$$toJson(false, null, null);
    }
  };

  /**
   * @override
   */


  Model.prototype.$toDatabaseJson = function $toDatabaseJson() {
    var jsonSchema = this.constructor.jsonSchema;
    var pick = jsonSchema && jsonSchema.properties;
    var omit = void 0;

    if (!pick) {
      omit = this.constructor.getRelations();
    }

    return this.$$toJson(true, omit, pick);
  };

  /**
   * @param {Object} queryContext
   * @returns {Promise|*}
   */


  Model.prototype.$beforeInsert = function $beforeInsert(queryContext) {};

  /**
   * @param {Object} queryContext
   * @returns {Promise|*}
   */


  Model.prototype.$afterInsert = function $afterInsert(queryContext) {};

  /**
   * @param {ModelOptions} opt
   * @param {QueryBuilderContext} queryContext
   * @returns {Promise|*}
   */


  Model.prototype.$beforeUpdate = function $beforeUpdate(opt, queryContext) {};

  /**
   * @param {ModelOptions} opt
   * @param {QueryBuilderContext} queryContext
   * @returns {Promise|*}
   */


  Model.prototype.$afterUpdate = function $afterUpdate(opt, queryContext) {};

  /**
   * @param {QueryBuilderContext} queryContext
   * @returns {Promise|*}
   */


  Model.prototype.$afterGet = function $afterGet(queryContext) {};

  /**
   * @returns {QueryBuilder}
   */


  Model.query = function query() {
    var ModelClass = this;

    return ModelClass.QueryBuilder.forClass(ModelClass).relateOperationFactory(function () {
      throw new Error('`relate` makes no sense in this context');
    }).unrelateOperationFactory(function () {
      throw new Error('`unrelate` makes no sense in this context');
    });
  };

  /**
   * @param {knex=} knex
   * @returns {knex}
   */


  Model.knex = function knex(_knex) {
    if (arguments.length) {
      this.$$knex = _knex;
    } else {
      var modelClass = this;

      while (modelClass && !modelClass.$$knex) {
        var proto = modelClass.prototype.__proto__;
        modelClass = proto && proto.constructor;
      }

      return modelClass && modelClass.$$knex;
    }
  };

  /**
   * @returns {knex}
   */


  Model.transaction = function transaction() {
    return this.knex();
  };

  /**
   * @return {Raw}
   */


  Model.raw = function raw() {
    var knex = this.knex();
    return knex.raw.apply(knex, arguments);
  };

  /**
   * @return {Object}
   */


  Model.fn = function fn() {
    var knex = this.knex();
    return knex.fn;
  };

  /**
   * @return {Formatter}
   */


  Model.formatter = function formatter() {
    return this.knex().client.formatter();
  };

  /**
   * @returns {knex.QueryBuilder}
   */


  Model.knexQuery = function knexQuery() {
    return this.knex().table(this.tableName);
  };

  /**
   * @param {knex} knex
   * @returns {Constructor.<Model>}
   */


  Model.bindKnex = function bindKnex(knex) {
    var ModelClass = this;

    if (!knex.$$objection) {
      knex.$$objection = {};
      knex.$$objection.id = _lodash2.default.uniqueId();
      knex.$$objection.boundModels = (0, _create2.default)(null);
    }

    // Check if this model class has already been bound to the given knex.
    if (knex.$$objection.boundModels[ModelClass.tableName]) {
      return knex.$$objection.boundModels[ModelClass.tableName];
    }

    // Create a new subclass of this class.
    var BoundModelClass = (0, _inheritModel2.default)(ModelClass);

    // The bound model is equal to the source model in every way. We want to copy
    // the hidden data as-is from the source so that we don't get the performance
    // penalty of calculating all memoized etc. values again.
    (0, _hiddenData.inheritHiddenData)(ModelClass, BoundModelClass);

    BoundModelClass.knex(knex);
    knex.$$objection.boundModels[ModelClass.tableName] = BoundModelClass;

    // Bind all relations also.
    BoundModelClass.relations(_lodash2.default.reduce(ModelClass.getRelations(), function (relations, relation, relationName) {
      relations[relationName] = relation.bindKnex(knex);
      return relations;
    }, (0, _create2.default)(null)));

    return BoundModelClass;
  };

  /**
   * @param {knex} trx
   * @returns {Constructor.<Model>}
   */


  Model.bindTransaction = function bindTransaction(trx) {
    return this.bindKnex(trx);
  };

  /**
   * @param {Model|Object} model
   * @param {ModelOptions=} options
   * @returns {Model}
   */


  Model.ensureModel = function ensureModel(model, options) {
    var ModelClass = this;

    if (!model) {
      return null;
    }

    if (model instanceof ModelClass) {
      return model;
    } else {
      return ModelClass.fromJson(model, options);
    }
  };

  /**
   * @param {Array.<Model|Object>} input
   * @param {ModelOptions=} options
   * @returns {Array.<Model>}
   */


  Model.ensureModelArray = function ensureModelArray(input, options) {
    var ModelClass = this;

    if (!input) {
      return [];
    }

    if (_lodash2.default.isArray(input)) {
      var models = new Array(input.length);

      for (var i = 0, l = input.length; i < l; ++i) {
        models[i] = ModelClass.ensureModel(input[i], options);
      }

      return models;
    } else {
      return [ModelClass.ensureModel(input, options)];
    }
  };

  /**
   * @returns {Array.<string>}
   */


  Model.getIdColumnArray = function getIdColumnArray() {
    var ModelClass = this;

    if (_lodash2.default.isArray(ModelClass.idColumn)) {
      return ModelClass.idColumn;
    } else {
      return [ModelClass.idColumn];
    }
  };

  /**
   * @returns {Array.<string>}
   */


  Model.getIdPropertyArray = function getIdPropertyArray() {
    var ModelClass = this;
    return _lodash2.default.map(ModelClass.getIdColumnArray(), function (col) {
      return idColumnToIdProperty(ModelClass, col);
    });
  };

  /**
   * @returns {string|Array.<string>}
   */


  Model.getIdProperty = function getIdProperty() {
    var ModelClass = this;

    if (_lodash2.default.isArray(ModelClass.idColumn)) {
      return _lodash2.default.map(ModelClass.idColumn, function (col) {
        return idColumnToIdProperty(ModelClass, col);
      });
    } else {
      return idColumnToIdProperty(ModelClass, ModelClass.idColumn);
    }
  };

  /**
   * @returns {string|Array.<string>}
   */


  Model.getFullIdColumn = function getFullIdColumn() {
    var _this4 = this;

    if (_lodash2.default.isArray(this.idColumn)) {
      return _lodash2.default.map(this.idColumn, function (col) {
        return _this4.tableName + '.' + col;
      });
    } else {
      return this.tableName + '.' + this.idColumn;
    }
  };

  /**
   * @private
   */


  Model.relations = function relations(_relations) {};

  /**
   * @return {Object.<string, Relation>}
   */


  Model.getRelations = function getRelations() {
    var _this5 = this;

    var relations = this.relations();

    if (!relations) {
      (function () {
        var ModelClass = _this5;

        relations = _lodash2.default.reduce(_this5.relationMappings, function (relations, mapping, relationName) {
          relations[relationName] = new mapping.relation(relationName, ModelClass);
          relations[relationName].setMapping(mapping);
          return relations;
        }, (0, _create2.default)(null));

        _this5.relations(relations);
      })();
    }

    return relations;
  };

  /**
   * @return {Relation}
   */


  Model.getRelation = function getRelation(name) {
    var relation = this.getRelations()[name];

    if (!relation) {
      throw new Error("model class '" + this.name + "' doesn't have relation '" + name + "'");
    }

    return relation;
  };

  /**
   * @param {Array.<Model|Object>} $models
   * @param {string|RelationExpression} expression
   * @param {Object.<string, function(QueryBuilder)>=} filters
   * @returns {Promise}
   */


  Model.loadRelated = function loadRelated($models, expression, filters) {
    return this.query().resolve(this.ensureModelArray($models)).eager(expression, filters).then(function (models) {
      return _lodash2.default.isArray($models) ? models : models[0];
    });
  };

  /**
   * @param {Constructor.<Model>=} filterConstructor
   * @param {Model|Array.<Model>} models
   * @param {function(Model, Model, string)} traverser
   * @return {Model}
   */


  Model.traverse = function traverse(filterConstructor, models, traverser) {
    filterConstructor = filterConstructor || null;

    if (_lodash2.default.isUndefined(traverser)) {
      traverser = models;
      models = filterConstructor;
      filterConstructor = null;
    }

    if (!_lodash2.default.isFunction(traverser)) {
      throw new Error('traverser must be a function');
    }

    _traverse(models, null, null, filterConstructor, traverser);
    return this;
  };

  /**
   * @protected
   * @returns {Array.<string>}
   */


  Model.$$getJsonAttributes = function $$getJsonAttributes() {
    var _this6 = this;

    // If the jsonAttributes property is not set, try to create it based
    // on the jsonSchema. All properties that are objects or arrays must
    // be converted to JSON.
    if (!this.jsonAttributes && this.jsonSchema) {
      this.jsonAttributes = [];

      _lodash2.default.each(this.jsonSchema.properties, function (prop, propName) {
        var types = _lodash2.default.compact(ensureArray(prop.type));

        if (types.length === 0 && _lodash2.default.isArray(prop.anyOf)) {
          types = _lodash2.default.flattenDeep(_lodash2.default.map(prop.anyOf, 'type'));
        }

        if (types.length === 0 && _lodash2.default.isArray(prop.oneOf)) {
          types = _lodash2.default.flattenDeep(_lodash2.default.map(prop.oneOf, 'type'));
        }

        if (_lodash2.default.includes(types, 'object') || _lodash2.default.includes(types, 'array')) {
          _this6.jsonAttributes.push(propName);
        }
      });
    }

    if (!_lodash2.default.isArray(this.jsonAttributes)) {
      this.jsonAttributes = [];
    }

    return this.jsonAttributes;
  };

  (0, _createClass3.default)(Model, null, [{
    key: 'OneToOneRelation',
    get: function get() {
      return _BelongsToOneRelation2.default;
    }
  }, {
    key: 'OneToManyRelation',
    get: function get() {
      return _HasManyRelation2.default;
    }

    /**
     * @type {string}
     */


    /**
     * @type {string|Array.<string>}
     */


    /**
     * @type {string}
     */


    /**
     * @type {string}
     */


    /**
     * @type {RegExp}
     */


    /**
     * @type {Array.<string>}
     */


    /**
     * @type {Object.<string, RelationMapping>}
     */


    /**
     * @private
     */

  }]);
  return Model;
}(_ModelBase3.default), _class2.QueryBuilder = _QueryBuilder2.default, _class2.RelatedQueryBuilder = _QueryBuilder2.default, _class2.HasOneRelation = _HasOneRelation2.default, _class2.HasManyRelation = _HasManyRelation2.default, _class2.ManyToManyRelation = _ManyToManyRelation2.default, _class2.BelongsToOneRelation = _BelongsToOneRelation2.default, _class2.tableName = null, _class2.idColumn = 'id', _class2.uidProp = '#id', _class2.uidRefProp = '#ref', _class2.propRefRegex = /#ref{([^\.]+)\.([^}]+)}/g, _class2.jsonAttributes = null, _class2.relationMappings = null, _class2.$$knex = null, _temp), (_applyDecoratedDescriptor(_class, 'OneToOneRelation', [_dec], (0, _getOwnPropertyDescriptor2.default)(_class, 'OneToOneRelation'), _class), _applyDecoratedDescriptor(_class, 'OneToManyRelation', [_dec2], (0, _getOwnPropertyDescriptor2.default)(_class, 'OneToManyRelation'), _class), _applyDecoratedDescriptor(_class, 'getIdColumnArray', [_memoize2.default], (0, _getOwnPropertyDescriptor2.default)(_class, 'getIdColumnArray'), _class), _applyDecoratedDescriptor(_class, 'getIdPropertyArray', [_memoize2.default], (0, _getOwnPropertyDescriptor2.default)(_class, 'getIdPropertyArray'), _class), _applyDecoratedDescriptor(_class, 'getIdProperty', [_memoize2.default], (0, _getOwnPropertyDescriptor2.default)(_class, 'getIdProperty'), _class), _applyDecoratedDescriptor(_class, 'getFullIdColumn', [_memoize2.default], (0, _getOwnPropertyDescriptor2.default)(_class, 'getFullIdColumn'), _class), _applyDecoratedDescriptor(_class, 'relations', [_dec3], (0, _getOwnPropertyDescriptor2.default)(_class, 'relations'), _class)), _class));
exports.default = Model;


function ensureArray(obj) {
  if (_lodash2.default.isArray(obj)) {
    return obj;
  } else {
    return [obj];
  }
}

function _traverse(models, parent, relationName, modelClass, callback) {
  if (!_lodash2.default.isObject(models)) {
    return;
  }

  if (_lodash2.default.isArray(models)) {
    for (var i = 0, l = models.length; i < l; ++i) {
      traverseOne(models[i], parent, relationName, modelClass, callback);
    }
  } else {
    traverseOne(models, parent, relationName, modelClass, callback);
  }
}

function traverseOne(model, parent, relationName, modelClass, callback) {
  if (!(model instanceof Model)) {
    return;
  }

  if (!modelClass || model instanceof modelClass) {
    callback(model, parent, relationName);
  }

  for (var relName in model.constructor.getRelations()) {
    if (_lodash2.default.has(model, relName)) {
      _traverse(model[relName], model, relName, modelClass, callback);
    }
  }
}

function idColumnToIdProperty(ModelClass, idColumn) {
  var idProperty = ModelClass.columnNameToPropertyName(idColumn);

  if (!idProperty) {
    throw new Error(ModelClass.tableName + '.$parseDatabaseJson probably changes the value of the id column `' + idColumn + '` which is a no-no.');
  }

  return idProperty;
}

function setId(model, id) {
  var idProp = model.constructor.getIdProperty();
  var isArray = _lodash2.default.isArray(idProp);

  if (_lodash2.default.isArray(id)) {
    if (isArray) {
      if (id.length !== idProp.length) {
        throw new Error('trying to set an invalid identifier for a model');
      }

      for (var i = 0; i < id.length; ++i) {
        model[idProp[i]] = id[i];
      }
    } else {
      if (id.length !== 1) {
        throw new Error('trying to set an invalid identifier for a model');
      }

      model[idProp] = id[0];
    }
  } else {
    if (isArray) {
      if (idProp.length > 1) {
        throw new Error('trying to set an invalid identifier for a model');
      }

      model[idProp[0]] = id;
    } else {
      model[idProp] = id;
    }
  }
}

function getId(model) {
  var idProp = model.constructor.getIdProperty();

  if (_lodash2.default.isArray(idProp)) {
    return model.$values(idProp);
  } else {
    return model[idProp];
  }
}