'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _FindOperation2 = require('../../queryBuilder/operations/FindOperation');

var _FindOperation3 = _interopRequireDefault(_FindOperation2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var ownerJoinColumnAliasPrefix = 'objectiontmpjoin';

var ManyToManyFindOperation = function (_FindOperation) {
  (0, _inherits3.default)(ManyToManyFindOperation, _FindOperation);

  function ManyToManyFindOperation(builder, name, opt) {
    (0, _classCallCheck3.default)(this, ManyToManyFindOperation);

    var _this = (0, _possibleConstructorReturn3.default)(this, _FindOperation.call(this, builder, name, opt));

    _this.relation = opt.relation;
    _this.owners = opt.owners;

    _this.ownerJoinColumnAlias = _lodash2.default.times(_this.relation.joinTableOwnerCol.length, function (idx) {
      return ownerJoinColumnAliasPrefix + idx;
    });

    _this.ownerJoinPropertyAlias = _lodash2.default.map(_this.ownerJoinColumnAlias, function (alias) {
      return _this.relation.relatedModelClass.columnNameToPropertyName(alias);
    });
    return _this;
  }

  ManyToManyFindOperation.prototype.onBeforeBuild = function onBeforeBuild(builder) {
    var _this2 = this;

    var ids = (0, _lodash2.default)(this.owners).map(function (owner) {
      return owner.$values(_this2.relation.ownerProp);
    }).uniqBy(function (id) {
      return id.join();
    }).value();

    if (!builder.has(/select/)) {
      // If the user hasn't specified a select clause, select the related model's columns.
      // If we don't do this we also get the join table's columns.
      builder.select(this.relation.relatedModelClass.tableName + '.*');

      // Also select all extra columns.
      _lodash2.default.each(this.relation.fullJoinTableExtraCols(), function (col) {
        builder.select(col);
      });
    }

    this.relation.findQuery(builder, ids);

    // We must select the owner join columns so that we know for which owner model the related
    // models belong to after the requests.
    _lodash2.default.each(this.relation.fullJoinTableOwnerCol(), function (fullJoinTableOwnerCol, idx) {
      builder.select(fullJoinTableOwnerCol + ' as ' + _this2.ownerJoinColumnAlias[idx]);
    });
  };

  ManyToManyFindOperation.prototype.onAfterInternal = function onAfterInternal(builder, related) {
    var _this3 = this;

    var relatedByOwnerId = _lodash2.default.groupBy(related, function (related) {
      return related.$values(_this3.ownerJoinPropertyAlias);
    });

    _lodash2.default.each(this.owners, function (owner) {
      owner[_this3.relation.name] = relatedByOwnerId[owner.$values(_this3.relation.ownerProp)] || [];
    });

    // Delete the temporary join aliases.
    _lodash2.default.each(related, function (rel) {
      _lodash2.default.each(_this3.ownerJoinPropertyAlias, function (alias) {
        delete rel[alias];
      });
    });

    return related;
  };

  return ManyToManyFindOperation;
}(_FindOperation3.default);

exports.default = ManyToManyFindOperation;