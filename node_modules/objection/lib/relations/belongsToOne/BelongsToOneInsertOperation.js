'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _InsertOperation2 = require('../../queryBuilder/operations/InsertOperation');

var _InsertOperation3 = _interopRequireDefault(_InsertOperation2);

var _promiseUtils = require('../../utils/promiseUtils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var BelongsToOneInsertOperation = function (_InsertOperation) {
  (0, _inherits3.default)(BelongsToOneInsertOperation, _InsertOperation);

  function BelongsToOneInsertOperation(builder, name, opt) {
    (0, _classCallCheck3.default)(this, BelongsToOneInsertOperation);

    var _this = (0, _possibleConstructorReturn3.default)(this, _InsertOperation.call(this, builder, name, opt));

    _this.relation = opt.relation;
    _this.owner = opt.owner;
    return _this;
  }

  BelongsToOneInsertOperation.prototype.call = function call(builder, args) {
    var retVal = _InsertOperation.prototype.call.call(this, builder, args);

    if (this.models.length > 1) {
      this.relation.throwError('can only insert one model to a BelongsToOneRelation');
    }

    return retVal;
  };

  BelongsToOneInsertOperation.prototype.onAfterQuery = function onAfterQuery(builder, inserted) {
    var _this2 = this;

    var maybePromise = _InsertOperation.prototype.onAfterQuery.call(this, builder, inserted);

    return (0, _promiseUtils.after)(maybePromise, function (inserted) {
      _this2.owner[_this2.relation.name] = inserted[0];
      var patch = {};

      _lodash2.default.each(_this2.relation.ownerProp, function (ownerProp, idx) {
        var relatedValue = inserted[0][_this2.relation.relatedProp[idx]];
        _this2.owner[ownerProp] = relatedValue;
        patch[ownerProp] = relatedValue;
      });

      return _this2.relation.ownerModelClass.query().childQueryOf(builder).patch(patch).whereComposite(_this2.relation.ownerModelClass.getFullIdColumn(), _this2.owner.$id()).return(inserted);
    });
  };

  return BelongsToOneInsertOperation;
}(_InsertOperation3.default);

exports.default = BelongsToOneInsertOperation;