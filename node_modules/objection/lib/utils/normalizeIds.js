'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _stringify = require('babel-runtime/core-js/json/stringify');

var _stringify2 = _interopRequireDefault(_stringify);

exports.default = function (ids, expectedProperties, opt) {
  opt = opt || {};

  if (!_lodash2.default.isArray(expectedProperties)) {
    throw new Error('expected expectedProperties to be an array, got ' + expectedProperties);
  }

  if (expectedProperties.length === 0) {
    throw new Error('expectedProperties must not be empty');
  }

  var isComposite = expectedProperties.length > 1;

  if (isComposite) {
    // For composite ids these are okay:
    //
    // 1. [1, 'foo', 4]
    // 2. {a: 1, b: 'foo', c: 4}
    // 3. [[1, 'foo', 4], [4, 'bar', 1]]
    // 4. [{a: 1, b: 'foo', c: 4}, {a: 4, b: 'bar', c: 1}]
    //
    if (_lodash2.default.isArray(ids)) {
      if (_lodash2.default.isArray(ids[0])) {
        // 3.
        ids = _lodash2.default.map(ids, function (item) {
          return convertIdArrayToObject(item, expectedProperties);
        });
      } else if (_lodash2.default.isObject(ids[0])) {
        // 4.
        ids = _lodash2.default.map(ids, ensureObject);
      } else {
        // 1.
        ids = [convertIdArrayToObject(ids, expectedProperties)];
      }
    } else if (_lodash2.default.isObject(ids)) {
      // 2.
      ids = [ids];
    } else {
      throw new Error('invalid composite key ' + (0, _stringify2.default)(ids));
    }
  } else {
    // For non-composite ids, these are okay:
    //
    // 1. 1
    // 2. {id: 1}
    // 3. [1, 'foo', 4]
    // 4. [{id: 1}, {id: 'foo'}, {id: 4}]
    //
    if (_lodash2.default.isArray(ids)) {
      if (_lodash2.default.isObject(ids[0])) {
        // 4.
        ids = _lodash2.default.map(ids, ensureObject);
      } else {
        // 3.
        ids = _lodash2.default.map(ids, function (item) {
          return _lodash2.default.zipObject(expectedProperties, [item]);
        });
      }
    } else if (_lodash2.default.isObject(ids)) {
      // 2.
      ids = [ids];
    } else {
      // 1.
      ids = [_lodash2.default.zipObject(expectedProperties, [ids])];
    }
  }

  _lodash2.default.each(ids, function (obj) {
    _lodash2.default.each(expectedProperties, function (prop) {
      if (_lodash2.default.isUndefined(obj[prop])) {
        throw new Error('expected id ' + (0, _stringify2.default)(obj) + ' to have property ' + prop);
      }
    });
  });

  if (opt.arrayOutput) {
    return _lodash2.default.map(ids, function (obj) {
      return _lodash2.default.map(expectedProperties, function (prop) {
        return obj[prop];
      });
    });
  } else {
    return ids;
  }
};

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

;

function convertIdArrayToObject(ids, expectedProperties) {
  if (!_lodash2.default.isArray(ids)) {
    throw new Error('invalid composite key ' + (0, _stringify2.default)(ids));
  }

  if (ids.length != expectedProperties.length) {
    throw new Error('composite identifier ' + (0, _stringify2.default)(ids) + ' should have ' + expectedProperties.length + ' values');
  }

  return _lodash2.default.zipObject(expectedProperties, ids);
}

function ensureObject(ids) {
  if (_lodash2.default.isObject(ids)) {
    return ids;
  } else {
    throw new Error('invalid composite key ' + (0, _stringify2.default)(ids));
  }
}